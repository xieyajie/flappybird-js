{"version":3,"sources":["resources/app.asar/node_modules/browser-pack/_prelude.js","Script/BirdCollision.js","project.js","Script/PillarGenerator.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","BirdCollision","module","cc","_RFpush","Class","extends","Component","properties","onLoad","manager","director","getCollisionManager","enabled","onCollisionEnter","other","self","node","group","this","dispatchEvent","Event","EventCustom","onCollisionExit","_RFpop","PillarGenerator","pillarPrefab","default","type","Prefab","tooltip","scroreSpacePrefab","scoreLabel","Label","score","visible","pillarSapce","pillarMinHeight","pillarMoveSpeed","pillarGenerateMargin","pillars","lastPillarGenerateMargin","birdPrefab","bird","birdUpSpeed","birdSpeed","birdGravitationalAcceleration","isCollided","setupEventListener","setupCollisionListener","setupBird","setupPillars","update","dt","dtSpace","pillarArr","upPillar","downPillar","scoreSpace","x","width","generateTwoPillar","minX","shift","removeFromParent","currentBirdSpeed","birdUpHeight","rotation","birdY","getPositionY","setPositionY","tmpPillar","instantiate","maxX","restartGame","string","toString","effectHeight","height","spaceCenterY","Math","random","upPillarDownY","upPillarHeight","upY","generateAPillar","downPillarUpY","downPillarHeight","downY","addChild","setPositionX","scoreSpaceCollider","getComponent","BoxCollider","size","offset","y","push","pillar","collider","on","Node","EventType","TOUCH_START","event","script"],"mappings":"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","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RFpush(module, '480d61GWTdMMaFhZexSRiJO', 'BirdCollision');\n// Script\\BirdCollision.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {},\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n\n    /**\r\n     * 当碰撞产生的时候调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        if (other.node.group == \"Pillar\") {\n            this.node.dispatchEvent(new cc.Event.EventCustom('collided', true));\n        }\n    },\n\n    onCollisionExit: function onCollisionExit(other, self) {\n        if (other.node.group == \"ScoreSpace\") {\n            this.node.dispatchEvent(new cc.Event.EventCustom('score', true));\n        }\n    }\n});\n\ncc._RFpop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"BirdCollision\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '480d61GWTdMMaFhZexSRiJO', 'BirdCollision');\n// Script\\BirdCollision.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {},\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n\n    /**\r\n     * 当碰撞产生的时候调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        if (other.node.group == \"Pillar\") {\n            this.node.dispatchEvent(new cc.Event.EventCustom('collided', true));\n        }\n    },\n\n    onCollisionExit: function onCollisionExit(other, self) {\n        if (other.node.group == \"ScoreSpace\") {\n            this.node.dispatchEvent(new cc.Event.EventCustom('score', true));\n        }\n    }\n});\n\ncc._RFpop();\n},{}],\"PillarGenerator\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'fec57h7ZKBEWbtIDVOxFXA9', 'PillarGenerator');\n// Script\\PillarGenerator.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        pillarPrefab: {\n            \"default\": null,\n            type: cc.Prefab,\n            tooltip: \"柱子障碍物的 Prefab\"\n        },\n\n        scroreSpacePrefab: {\n            \"default\": null,\n            type: cc.Prefab,\n            tooltip: \"柱子障碍物中间的空隙 prefab\"\n        },\n\n        scoreLabel: {\n            \"default\": null,\n            type: cc.Label,\n            tooltip: \"显示分数的 label 组件\"\n        },\n\n        score: {\n            \"default\": 0,\n            visible: false,\n            tooltip: \"玩家分数\"\n        },\n\n        pillarSapce: {\n            \"default\": 0,\n            tooltip: \"上下障碍物的中间空隙间距\"\n        },\n\n        pillarMinHeight: {\n            \"default\": 0,\n            tooltip: \"上下预留给障碍物的最小高度\"\n        },\n\n        pillarMoveSpeed: {\n            \"default\": 0,\n            tooltip: \"障碍物的移动速度\"\n        },\n\n        pillarGenerateMargin: {\n            \"default\": 0,\n            tooltip: \"间隔多远生成一次障碍物\"\n        },\n\n        pillars: {\n            \"default\": [],\n            visible: false,\n            tooltip: \"记录所有障碍物的数组\"\n        },\n\n        lastPillarGenerateMargin: {\n            \"default\": 0,\n            visible: false,\n            tooltip: \"距离上一次生成障碍物间隔了多远了\"\n        },\n\n        birdPrefab: {\n            \"default\": null,\n            type: cc.Prefab,\n            tooltip: \"小鸟的 Prefab\"\n        },\n\n        bird: {\n            \"default\": null,\n            visible: false,\n            tooltip: \"运行时生成的，当前在画面中的鸟\"\n        },\n\n        birdUpSpeed: {\n            \"default\": 0.0,\n            tooltip: \"点击屏幕时，鸟获得的上升速度\"\n        },\n\n        birdSpeed: {\n            \"default\": 0.0,\n            visible: false,\n            tooltip: \"鸟当前在 y 方向上的速度\"\n        },\n\n        birdGravitationalAcceleration: {\n            \"default\": 0.0,\n            tooltip: \"鸟下降的重力加速度\"\n        },\n\n        isCollided: {\n            \"default\": false,\n            visible: false,\n            tooltip: \"是否发生了碰撞\"\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.setupEventListener();\n        this.setupCollisionListener();\n        this.setupBird();\n        this.setupPillars();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.isCollided) {\n            return;\n        }\n\n        // 本次更新移动的距离\n        var dtSpace = dt * this.pillarMoveSpeed;\n\n        // 移动各个障碍物\n        for (var i = 0; i < this.pillars.length; i++) {\n            var pillarArr = this.pillars[i];\n            var upPillar = pillarArr[0];\n            var downPillar = pillarArr[1];\n            var scoreSpace = pillarArr[2];\n\n            upPillar.x -= dtSpace;\n            downPillar.x -= dtSpace;\n            scoreSpace.x -= dtSpace;\n        }\n\n        // 记录距离上一次生成障碍物间隔了多远了\n        this.lastPillarGenerateMargin += dtSpace;\n\n        // 检查是否需要生成新的障碍物\n        if (this.lastPillarGenerateMargin >= this.pillarGenerateMargin) {\n            // TODO：这里会有误差的应该\n            var x = this.node.width / 2 + this.pillars[0][0].width / 2;\n            this.generateTwoPillar(x);\n            this.lastPillarGenerateMargin = 0;\n        }\n\n        // 离开屏幕的障碍物的清理\n        for (var i = 0; i < this.pillars.length; i++) {\n            var pillarArr = this.pillars[i];\n            var upPillar = pillarArr[0];\n            var downPillar = pillarArr[1];\n            var scoreSpace = pillarArr[2];\n\n            var minX = -this.node.width / 2 - upPillar.width / 2;\n            if (upPillar.x < minX) {\n                this.pillars.shift();\n                upPillar.removeFromParent();\n                downPillar.removeFromParent();\n                scoreSpace.removeFromParent();\n            }\n        }\n\n        //鸟的当前速度\n        var currentBirdSpeed = this.birdSpeed - this.birdGravitationalAcceleration * dt;\n        this.birdSpeed = currentBirdSpeed;\n        var birdUpHeight = dt * this.birdSpeed;\n        this.bird.rotation = -20.0 * (currentBirdSpeed / this.birdUpSpeed);\n        var birdY = this.bird.getPositionY() + birdUpHeight;\n        this.bird.setPositionY(birdY);\n    },\n\n    /**\r\n     * 生成初始的障碍物\r\n     */\n    setupPillars: function setupPillars() {\n        var tmpPillar = cc.instantiate(this.pillarPrefab);\n        // 最大可生成的位置\n        var maxX = this.node.width / 2 + tmpPillar.width / 2;\n        // 记录下最后一次生成位置的下一个位置\n        this.generateTwoPillar(maxX);\n        // 距离上一个生成位置已经间隔了多远\n        this.lastPillarGenerateMargin = 0;\n    },\n\n    /**\r\n     * 重新开始一局新游戏\r\n     */\n    restartGame: function restartGame() {\n        // 移除各个障碍物\n        for (var i = 0; i < this.pillars.length; i++) {\n            var pillarArr = this.pillars[i];\n            var upPillar = pillarArr[0];\n            var downPillar = pillarArr[1];\n            var scoreSpace = pillarArr[2];\n\n            upPillar.removeFromParent();\n            downPillar.removeFromParent();\n            scoreSpace.removeFromParent();\n        }\n        this.pillars = [];\n\n        // 移除鸟\n        this.bird.removeFromParent();\n\n        // 分数\n        this.score = 0;\n        this.scoreLabel.string = this.score.toString();\n\n        // 重新初始化设置\n        this.setupPillars();\n        this.setupBird();\n\n        // 重新开始游戏\n        this.isCollided = false;\n    },\n\n    /**\r\n     * 生成一对新的障碍物并自动加入到场景中\r\n     * @param x 障碍物生成的水平位置\r\n     */\n    generateTwoPillar: function generateTwoPillar(x) {\n        // 障碍物的宽度\n        var width = cc.instantiate(this.pillarPrefab).width;\n\n        // 障碍物间隙中心位置上下\n        // 这里已经照顾到了上下障碍物都有个最小高度\n        var effectHeight = this.node.height - this.pillarMinHeight * 2 - this.pillarSapce;\n        var spaceCenterY = Math.random() * effectHeight - effectHeight / 2;\n\n        // 上边障碍物的下边缘位置\n        var upPillarDownY = spaceCenterY + this.pillarSapce / 2;\n        // 上边障碍物的高度\n        var upPillarHeight = this.node.height / 2 - upPillarDownY;\n        // 上边障碍物的 Y\n        var upY = upPillarDownY + upPillarHeight / 2;\n        // 生成上边的障碍物\n        var upPillar = this.generateAPillar(x, upY, width, upPillarHeight, 0);\n\n        // 下边障碍物的上边缘位置\n        var downPillarUpY = spaceCenterY - this.pillarSapce / 2;\n        // 下边障碍物的高度\n        var downPillarHeight = this.node.height / 2 + upPillarDownY;\n        // 下边障碍物的 Y\n        var downY = downPillarUpY - downPillarHeight / 2;\n        // 设置下边障碍物的位置大小\n        var downPillar = this.generateAPillar(x, downY, width, downPillarHeight, 180);\n\n        // 中间空隙中添加一个 scoreSpace 用于计分\n        var scoreSpace = cc.instantiate(this.scroreSpacePrefab);\n        this.node.addChild(scoreSpace);\n        scoreSpace.width = width;\n        scoreSpace.height = upPillarDownY - downPillarUpY;\n        scoreSpace.setPositionX(x);\n        scoreSpace.setPositionY(downPillarUpY + scoreSpace.height / 2);\n        var scoreSpaceCollider = scoreSpace.getComponent(cc.BoxCollider);\n        scoreSpaceCollider.size.width = scoreSpace.width;\n        scoreSpaceCollider.size.height = scoreSpace.height;\n        scoreSpaceCollider.offset.x = 0;\n        scoreSpaceCollider.offset.y = 0;\n\n        // 放到障碍物数组中\n        this.pillars.push([upPillar, downPillar, scoreSpace]);\n    },\n\n    /**\r\n     * 生成一个新的障碍物并自动加入到场景中\r\n     */\n    generateAPillar: function generateAPillar(x, y, width, height, rotation) {\n        // 生成障碍物实例\n        var pillar = cc.instantiate(this.pillarPrefab);\n        this.node.addChild(pillar);\n\n        // 设置障碍物的旋转\n        pillar.rotation = rotation;\n        // 设置障碍物的位置大小\n        pillar.width = width;\n        pillar.height = height;\n        pillar.setPositionX(x);\n        pillar.setPositionY(y);\n        // 设置碰撞体的位置大小\n        var collider = pillar.getComponent(cc.BoxCollider);\n        collider.size.width = pillar.width;\n        collider.size.height = pillar.height;\n        collider.offset.x = 0;\n        collider.offset.y = 0;\n\n        return pillar;\n    },\n\n    /**\r\n     * 生成初始的小鸟\r\n     */\n    setupBird: function setupBird() {\n        this.bird = cc.instantiate(this.birdPrefab);\n        // 初始化位置(x始终不变)\n        //x不变\n        var x = -200;\n        var y = 0;\n        this.bird.setPositionX(x);\n        this.bird.setPositionY(y);\n        this.node.addChild(this.bird);\n    },\n\n    /**\r\n     * 初始化系统事件监听\r\n     */\n    setupEventListener: function setupEventListener() {\n        this.node.on(cc.Node.EventType.TOUCH_START, function (event) {\n            if (this.isCollided) {\n                this.restartGame();\n\n                return;\n            }\n\n            this.birdSpeed = this.birdUpSpeed;\n            this.bird.rotation = -20;\n        }, this);\n    },\n\n    /**\r\n     * 初始化碰撞检测\r\n     */\n    setupCollisionListener: function setupCollisionListener() {\n        this.node.on('collided', function (event) {\n            this.getComponent('PillarGenerator').isCollided = true;\n        });\n\n        this.node.on('score', function (event) {\n            var script = this.getComponent('PillarGenerator');\n            script.score++;\n            script.scoreLabel.string = script.score.toString();\n        });\n    }\n\n});\n\ncc._RFpop();\n},{}]},{},[\"BirdCollision\",\"PillarGenerator\"])\n\n","\"use strict\";\ncc._RFpush(module, 'fec57h7ZKBEWbtIDVOxFXA9', 'PillarGenerator');\n// Script\\PillarGenerator.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        pillarPrefab: {\n            \"default\": null,\n            type: cc.Prefab,\n            tooltip: \"柱子障碍物的 Prefab\"\n        },\n\n        scroreSpacePrefab: {\n            \"default\": null,\n            type: cc.Prefab,\n            tooltip: \"柱子障碍物中间的空隙 prefab\"\n        },\n\n        scoreLabel: {\n            \"default\": null,\n            type: cc.Label,\n            tooltip: \"显示分数的 label 组件\"\n        },\n\n        score: {\n            \"default\": 0,\n            visible: false,\n            tooltip: \"玩家分数\"\n        },\n\n        pillarSapce: {\n            \"default\": 0,\n            tooltip: \"上下障碍物的中间空隙间距\"\n        },\n\n        pillarMinHeight: {\n            \"default\": 0,\n            tooltip: \"上下预留给障碍物的最小高度\"\n        },\n\n        pillarMoveSpeed: {\n            \"default\": 0,\n            tooltip: \"障碍物的移动速度\"\n        },\n\n        pillarGenerateMargin: {\n            \"default\": 0,\n            tooltip: \"间隔多远生成一次障碍物\"\n        },\n\n        pillars: {\n            \"default\": [],\n            visible: false,\n            tooltip: \"记录所有障碍物的数组\"\n        },\n\n        lastPillarGenerateMargin: {\n            \"default\": 0,\n            visible: false,\n            tooltip: \"距离上一次生成障碍物间隔了多远了\"\n        },\n\n        birdPrefab: {\n            \"default\": null,\n            type: cc.Prefab,\n            tooltip: \"小鸟的 Prefab\"\n        },\n\n        bird: {\n            \"default\": null,\n            visible: false,\n            tooltip: \"运行时生成的，当前在画面中的鸟\"\n        },\n\n        birdUpSpeed: {\n            \"default\": 0.0,\n            tooltip: \"点击屏幕时，鸟获得的上升速度\"\n        },\n\n        birdSpeed: {\n            \"default\": 0.0,\n            visible: false,\n            tooltip: \"鸟当前在 y 方向上的速度\"\n        },\n\n        birdGravitationalAcceleration: {\n            \"default\": 0.0,\n            tooltip: \"鸟下降的重力加速度\"\n        },\n\n        isCollided: {\n            \"default\": false,\n            visible: false,\n            tooltip: \"是否发生了碰撞\"\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.setupEventListener();\n        this.setupCollisionListener();\n        this.setupBird();\n        this.setupPillars();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.isCollided) {\n            return;\n        }\n\n        // 本次更新移动的距离\n        var dtSpace = dt * this.pillarMoveSpeed;\n\n        // 移动各个障碍物\n        for (var i = 0; i < this.pillars.length; i++) {\n            var pillarArr = this.pillars[i];\n            var upPillar = pillarArr[0];\n            var downPillar = pillarArr[1];\n            var scoreSpace = pillarArr[2];\n\n            upPillar.x -= dtSpace;\n            downPillar.x -= dtSpace;\n            scoreSpace.x -= dtSpace;\n        }\n\n        // 记录距离上一次生成障碍物间隔了多远了\n        this.lastPillarGenerateMargin += dtSpace;\n\n        // 检查是否需要生成新的障碍物\n        if (this.lastPillarGenerateMargin >= this.pillarGenerateMargin) {\n            // TODO：这里会有误差的应该\n            var x = this.node.width / 2 + this.pillars[0][0].width / 2;\n            this.generateTwoPillar(x);\n            this.lastPillarGenerateMargin = 0;\n        }\n\n        // 离开屏幕的障碍物的清理\n        for (var i = 0; i < this.pillars.length; i++) {\n            var pillarArr = this.pillars[i];\n            var upPillar = pillarArr[0];\n            var downPillar = pillarArr[1];\n            var scoreSpace = pillarArr[2];\n\n            var minX = -this.node.width / 2 - upPillar.width / 2;\n            if (upPillar.x < minX) {\n                this.pillars.shift();\n                upPillar.removeFromParent();\n                downPillar.removeFromParent();\n                scoreSpace.removeFromParent();\n            }\n        }\n\n        //鸟的当前速度\n        var currentBirdSpeed = this.birdSpeed - this.birdGravitationalAcceleration * dt;\n        this.birdSpeed = currentBirdSpeed;\n        var birdUpHeight = dt * this.birdSpeed;\n        this.bird.rotation = -20.0 * (currentBirdSpeed / this.birdUpSpeed);\n        var birdY = this.bird.getPositionY() + birdUpHeight;\n        this.bird.setPositionY(birdY);\n    },\n\n    /**\r\n     * 生成初始的障碍物\r\n     */\n    setupPillars: function setupPillars() {\n        var tmpPillar = cc.instantiate(this.pillarPrefab);\n        // 最大可生成的位置\n        var maxX = this.node.width / 2 + tmpPillar.width / 2;\n        // 记录下最后一次生成位置的下一个位置\n        this.generateTwoPillar(maxX);\n        // 距离上一个生成位置已经间隔了多远\n        this.lastPillarGenerateMargin = 0;\n    },\n\n    /**\r\n     * 重新开始一局新游戏\r\n     */\n    restartGame: function restartGame() {\n        // 移除各个障碍物\n        for (var i = 0; i < this.pillars.length; i++) {\n            var pillarArr = this.pillars[i];\n            var upPillar = pillarArr[0];\n            var downPillar = pillarArr[1];\n            var scoreSpace = pillarArr[2];\n\n            upPillar.removeFromParent();\n            downPillar.removeFromParent();\n            scoreSpace.removeFromParent();\n        }\n        this.pillars = [];\n\n        // 移除鸟\n        this.bird.removeFromParent();\n\n        // 分数\n        this.score = 0;\n        this.scoreLabel.string = this.score.toString();\n\n        // 重新初始化设置\n        this.setupPillars();\n        this.setupBird();\n\n        // 重新开始游戏\n        this.isCollided = false;\n    },\n\n    /**\r\n     * 生成一对新的障碍物并自动加入到场景中\r\n     * @param x 障碍物生成的水平位置\r\n     */\n    generateTwoPillar: function generateTwoPillar(x) {\n        // 障碍物的宽度\n        var width = cc.instantiate(this.pillarPrefab).width;\n\n        // 障碍物间隙中心位置上下\n        // 这里已经照顾到了上下障碍物都有个最小高度\n        var effectHeight = this.node.height - this.pillarMinHeight * 2 - this.pillarSapce;\n        var spaceCenterY = Math.random() * effectHeight - effectHeight / 2;\n\n        // 上边障碍物的下边缘位置\n        var upPillarDownY = spaceCenterY + this.pillarSapce / 2;\n        // 上边障碍物的高度\n        var upPillarHeight = this.node.height / 2 - upPillarDownY;\n        // 上边障碍物的 Y\n        var upY = upPillarDownY + upPillarHeight / 2;\n        // 生成上边的障碍物\n        var upPillar = this.generateAPillar(x, upY, width, upPillarHeight, 0);\n\n        // 下边障碍物的上边缘位置\n        var downPillarUpY = spaceCenterY - this.pillarSapce / 2;\n        // 下边障碍物的高度\n        var downPillarHeight = this.node.height / 2 + upPillarDownY;\n        // 下边障碍物的 Y\n        var downY = downPillarUpY - downPillarHeight / 2;\n        // 设置下边障碍物的位置大小\n        var downPillar = this.generateAPillar(x, downY, width, downPillarHeight, 180);\n\n        // 中间空隙中添加一个 scoreSpace 用于计分\n        var scoreSpace = cc.instantiate(this.scroreSpacePrefab);\n        this.node.addChild(scoreSpace);\n        scoreSpace.width = width;\n        scoreSpace.height = upPillarDownY - downPillarUpY;\n        scoreSpace.setPositionX(x);\n        scoreSpace.setPositionY(downPillarUpY + scoreSpace.height / 2);\n        var scoreSpaceCollider = scoreSpace.getComponent(cc.BoxCollider);\n        scoreSpaceCollider.size.width = scoreSpace.width;\n        scoreSpaceCollider.size.height = scoreSpace.height;\n        scoreSpaceCollider.offset.x = 0;\n        scoreSpaceCollider.offset.y = 0;\n\n        // 放到障碍物数组中\n        this.pillars.push([upPillar, downPillar, scoreSpace]);\n    },\n\n    /**\r\n     * 生成一个新的障碍物并自动加入到场景中\r\n     */\n    generateAPillar: function generateAPillar(x, y, width, height, rotation) {\n        // 生成障碍物实例\n        var pillar = cc.instantiate(this.pillarPrefab);\n        this.node.addChild(pillar);\n\n        // 设置障碍物的旋转\n        pillar.rotation = rotation;\n        // 设置障碍物的位置大小\n        pillar.width = width;\n        pillar.height = height;\n        pillar.setPositionX(x);\n        pillar.setPositionY(y);\n        // 设置碰撞体的位置大小\n        var collider = pillar.getComponent(cc.BoxCollider);\n        collider.size.width = pillar.width;\n        collider.size.height = pillar.height;\n        collider.offset.x = 0;\n        collider.offset.y = 0;\n\n        return pillar;\n    },\n\n    /**\r\n     * 生成初始的小鸟\r\n     */\n    setupBird: function setupBird() {\n        this.bird = cc.instantiate(this.birdPrefab);\n        // 初始化位置(x始终不变)\n        //x不变\n        var x = -200;\n        var y = 0;\n        this.bird.setPositionX(x);\n        this.bird.setPositionY(y);\n        this.node.addChild(this.bird);\n    },\n\n    /**\r\n     * 初始化系统事件监听\r\n     */\n    setupEventListener: function setupEventListener() {\n        this.node.on(cc.Node.EventType.TOUCH_START, function (event) {\n            if (this.isCollided) {\n                this.restartGame();\n\n                return;\n            }\n\n            this.birdSpeed = this.birdUpSpeed;\n            this.bird.rotation = -20;\n        }, this);\n    },\n\n    /**\r\n     * 初始化碰撞检测\r\n     */\n    setupCollisionListener: function setupCollisionListener() {\n        this.node.on('collided', function (event) {\n            this.getComponent('PillarGenerator').isCollided = true;\n        });\n\n        this.node.on('score', function (event) {\n            var script = this.getComponent('PillarGenerator');\n            script.score++;\n            script.scoreLabel.string = script.score.toString();\n        });\n    }\n\n});\n\ncc._RFpop();"],"sourceRoot":"/source/"}